# iOS/macOS Template Fastfile
# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out:
# https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out:
# https://docs.fastlane.tools/plugins/available-plugins

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# =============================================================================
# CONSTANTS AND CONFIGURATION
# =============================================================================

# Default platform - can be overridden
default_platform(:ios)

# Build configurations
DEBUG_CONFIG = "Debug"
RELEASE_CONFIG = "Release"

# Simulator devices for testing
IOS_SIMULATOR = "iPhone 15 Pro"
MACOS_DESTINATION = "platform=macOS"

# =============================================================================
# HELPER METHODS
# =============================================================================

def get_scheme_name
  # TODO: Replace with your actual scheme name
  return ENV["SCHEME_NAME"] || "YourAppName"
end

def get_workspace_name
  # TODO: Replace with your actual workspace name
  return ENV["WORKSPACE_NAME"] || "YourAppName.xcworkspace"
end

def get_project_name
  # TODO: Replace with your actual project name
  return ENV["PROJECT_NAME"] || "YourAppName.xcodeproj"
end

def get_bundle_id(platform = "ios")
  base_id = ENV["BUNDLE_ID_BASE"] || "com.yourcompany.yourapp"
  case platform
  when "macos"
    return "#{base_id}.macos"
  else
    return base_id
  end
end

def cleanup_build_artifacts
  # Clean up build artifacts
  sh("rm -rf ../build") rescue nil
  sh("rm -rf ../DerivedData") rescue nil
end

# =============================================================================
# BEFORE/AFTER HOOKS
# =============================================================================

before_all do |lane, options|
  # Ensure we're in a clean state
  ensure_git_status_clean unless options[:skip_git_check]

  # Setup environment
  setup_ci if ENV["CI"]
end

after_all do |lane, options|
  # Clean up after successful run
  cleanup_build_artifacts unless options[:skip_cleanup]
end

error do |lane, exception, options|
  # Handle errors
  cleanup_build_artifacts unless options[:skip_cleanup]
  UI.error("Lane #{lane} failed with exception: #{exception}")
end

# =============================================================================
# iOS PLATFORM
# =============================================================================

platform :ios do

  # ---------------------------------------------------------------------------
  # TESTING LANES
  # ---------------------------------------------------------------------------

  desc "Run unit and UI tests for iOS"
  lane :test do |options|
    scheme = options[:scheme] || get_scheme_name
    device = options[:device] || IOS_SIMULATOR

    begin
      run_tests(
        workspace: get_workspace_name,
        scheme: scheme,
        device: device,
        clean: true,
        code_coverage: true,
        output_directory: "./test_output",
        output_types: "html,junit",
        fail_build: true
      )
    rescue => ex
      UI.error("Tests failed: #{ex}")
      raise ex
    end
  end

  desc "Run tests on multiple iOS simulators"
  lane :test_multiple do
    devices = ["iPhone 15 Pro", "iPhone 15 Plus", "iPad Pro (12.9-inch) (6th generation)"]

    devices.each do |device|
      UI.header("Testing on #{device}")
      test(device: device)
    end
  end

  # ---------------------------------------------------------------------------
  # BUILD LANES
  # ---------------------------------------------------------------------------

  desc "Build iOS app for development"
  lane :build_debug do |options|
    scheme = options[:scheme] || get_scheme_name

    build_app(
      workspace: get_workspace_name,
      scheme: scheme,
      configuration: DEBUG_CONFIG,
      clean: true,
      export_method: "development",
      export_options: {
        signingStyle: "automatic",
        thinning: "<none>"
      },
      output_directory: "./build",
      output_name: "#{scheme}_Debug.ipa"
    )
  end

  desc "Build iOS app for release"
  lane :build_release do |options|
    scheme = options[:scheme] || get_scheme_name

    # Sync certificates and provisioning profiles
    match(type: "appstore", readonly: true)

    build_app(
      workspace: get_workspace_name,
      scheme: scheme,
      configuration: RELEASE_CONFIG,
      clean: true,
      export_method: "app-store",
      export_options: {
        signingStyle: "manual",
        provisioningProfiles: {
          get_bundle_id => ENV["sigh_#{get_bundle_id}_appstore_profile-name"]
        }
      },
      output_directory: "./build",
      output_name: "#{scheme}_Release.ipa"
    )
  end

  # ---------------------------------------------------------------------------
  # DEPLOYMENT LANES
  # ---------------------------------------------------------------------------

  desc "Upload to TestFlight for beta testing"
  lane :beta do |options|
    # Build the app
    build_release

    # Upload to TestFlight
    upload_to_testflight(
      skip_waiting_for_build_processing: false,
      skip_submission: true,
      distribute_external: false,
      groups: options[:groups] || ["Internal Testers"],
      changelog: options[:changelog] || "Bug fixes and improvements"
    )

    # Send notification
    if ENV["SLACK_WEBHOOK_URL"]
      slack(
        message: "iOS Beta build uploaded to TestFlight! 🚀",
        channel: "#releases"
      )
    end
  end

  desc "Deploy to App Store"
  lane :release do |options|
    # Build the app
    build_release

    # Upload to App Store
    upload_to_app_store(
      force: true,
      reject_if_possible: true,
      skip_metadata: false,
      skip_screenshots: false,
      submit_for_review: false,
      automatic_release: false
    )

    # Send notification
    if ENV["SLACK_WEBHOOK_URL"]
      slack(
        message: "iOS app submitted to App Store! 📱✨",
        channel: "#releases"
      )
    end
  end

  # ---------------------------------------------------------------------------
  # METADATA & SCREENSHOTS
  # ---------------------------------------------------------------------------

  desc "Generate screenshots for App Store"
  lane :screenshots do
    capture_screenshots(
      workspace: get_workspace_name,
      scheme: get_scheme_name,
      devices: [
        "iPhone 15 Pro Max",
        "iPhone 15 Pro",
        "iPhone SE (3rd generation)",
        "iPad Pro (12.9-inch) (6th generation)"
      ],
      languages: ["en-US"],
      output_directory: "./screenshots",
      clear_previous_screenshots: true,
      override_status_bar: true,
      add_photos: ["screenshot1.png", "screenshot2.png"],
      localize_simulator: true
    )
  end

  desc "Upload metadata to App Store Connect"
  lane :metadata do
    upload_to_app_store(
      skip_binary_upload: true,
      skip_screenshots: false,
      overwrite_screenshots: true
    )
  end

  # ---------------------------------------------------------------------------
  # UTILITY LANES
  # ---------------------------------------------------------------------------

  desc "Increment build number"
  lane :increment_build do
    increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: get_project_name
    )

    commit_version_bump(
      message: "Increment build number",
      xcodeproj: get_project_name
    )
  end

  desc "Increment version number"
  lane :increment_version do |options|
    version_type = options[:type] || "patch" # major, minor, patch

    increment_version_number(
      bump_type: version_type,
      xcodeproj: get_project_name
    )

    commit_version_bump(
      message: "Increment #{version_type} version",
      xcodeproj: get_project_name
    )
  end

end

# =============================================================================
# MACOS PLATFORM
# =============================================================================

platform :mac do

  # ---------------------------------------------------------------------------
  # TESTING LANES
  # ---------------------------------------------------------------------------

  desc "Run unit and UI tests for macOS"
  lane :test do |options|
    scheme = options[:scheme] || get_scheme_name

    begin
      run_tests(
        workspace: get_workspace_name,
        scheme: scheme,
        destination: MACOS_DESTINATION,
        clean: true,
        code_coverage: true,
        output_directory: "./test_output",
        output_types: "html,junit",
        fail_build: true
      )
    rescue => ex
      UI.error("macOS tests failed: #{ex}")
      raise ex
    end
  end

  # ---------------------------------------------------------------------------
  # BUILD LANES
  # ---------------------------------------------------------------------------

  desc "Build macOS app for development"
  lane :build_debug do |options|
    scheme = options[:scheme] || get_scheme_name

    build_app(
      workspace: get_workspace_name,
      scheme: scheme,
      configuration: DEBUG_CONFIG,
      clean: true,
      destination: MACOS_DESTINATION,
      export_method: "development",
      output_directory: "./build",
      output_name: "#{scheme}_macOS_Debug.app"
    )
  end

  desc "Build macOS app for release"
  lane :build_release do |options|
    scheme = options[:scheme] || get_scheme_name

    # Sync certificates and provisioning profiles
    match(type: "appstore", readonly: true, platform: "macos")

    build_app(
      workspace: get_workspace_name,
      scheme: scheme,
      configuration: RELEASE_CONFIG,
      clean: true,
      destination: MACOS_DESTINATION,
      export_method: "app-store",
      export_options: {
        signingStyle: "manual",
        provisioningProfiles: {
          get_bundle_id("macos") => ENV["sigh_#{get_bundle_id('macos')}_appstore_profile-name"]
        }
      },
      output_directory: "./build",
      output_name: "#{scheme}_macOS_Release.app"
    )
  end

  # ---------------------------------------------------------------------------
  # DEPLOYMENT LANES
  # ---------------------------------------------------------------------------

  desc "Upload macOS app to TestFlight"
  lane :beta do |options|
    # Build the app
    build_release

    # Upload to TestFlight
    upload_to_testflight(
      skip_waiting_for_build_processing: false,
      skip_submission: true,
      distribute_external: false,
      groups: options[:groups] || ["Internal Testers"],
      changelog: options[:changelog] || "Bug fixes and improvements",
      platform: "osx"
    )

    # Send notification
    if ENV["SLACK_WEBHOOK_URL"]
      slack(
        message: "macOS Beta build uploaded to TestFlight! 🖥️✨",
        channel: "#releases"
      )
    end
  end

  desc "Deploy macOS app to App Store"
  lane :release do |options|
    # Build the app
    build_release

    # Upload to App Store
    upload_to_app_store(
      force: true,
      reject_if_possible: true,
      skip_metadata: false,
      skip_screenshots: false,
      submit_for_review: false,
      automatic_release: false,
      platform: "osx"
    )

    # Send notification
    if ENV["SLACK_WEBHOOK_URL"]
      slack(
        message: "macOS app submitted to App Store! 🖥️📦",
        channel: "#releases"
      )
    end
  end

end

# =============================================================================
# CROSS-PLATFORM LANES
# =============================================================================

desc "Run tests on both iOS and macOS"
lane :test_all do
  ios_test
  mac_test
end

desc "Build both iOS and macOS apps"
lane :build_all do |options|
  config = options[:config] || "debug"

  case config
  when "debug"
    ios_build_debug
    mac_build_debug
  when "release"
    ios_build_release
    mac_build_release
  end
end

desc "Deploy both iOS and macOS apps to TestFlight"
lane :beta_all do |options|
  ios_beta(options)
  mac_beta(options)
end

desc "Setup code signing for both platforms"
lane :setup_signing do
  match(type: "development", platform: "ios")
  match(type: "appstore", platform: "ios")
  match(type: "development", platform: "macos")
  match(type: "appstore", platform: "macos")
end

desc "Clean all build artifacts and derived data"
lane :clean_all do
  cleanup_build_artifacts
  clear_derived_data
  reset_git_repo(skip_clean: true, force: true)
end