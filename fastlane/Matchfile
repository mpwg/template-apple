# iOS/macOS Template Matchfile
# This file contains configuration for Fastlane Match (code signing)
# More information: https://docs.fastlane.tools/actions/match/

# =============================================================================
# ENVIRONMENT VARIABLE VALIDATION
# =============================================================================

def validate_match_env_vars
  required_vars = {
    "MATCH_GIT_URL" => "Git URL for storing certificates (e.g., 'https://github.com/org/certs.git')",
    "MATCH_PASSWORD" => "Password for encrypting certificates (keep this secret!)",
    "APPLE_ID" => "Your Apple ID email address",
    "DEVELOPMENT_TEAM" => "Your Apple Developer Team ID"
  }

  missing_vars = []

  required_vars.each do |var_name, description|
    if ENV[var_name].nil? || ENV[var_name].strip.empty?
      missing_vars << "❌ #{var_name}: #{description}"
    end
  end

  unless missing_vars.empty?
    puts "\n🔐 FASTLANE MATCH CONFIGURATION ERROR 🔐"
    puts "\nThe following environment variables are REQUIRED for code signing:"
    puts missing_vars.join("\n")
    puts "\n📝 Code Signing Setup Instructions:"
    puts "1. Create a private Git repository for storing certificates"
    puts "2. Set MATCH_GIT_URL to your certificates repository URL"
    puts "3. Set a strong MATCH_PASSWORD for encrypting certificates"
    puts "4. Set APPLE_ID and DEVELOPMENT_TEAM from your Apple Developer account"
    puts "5. Run: fastlane match init"
    puts "6. Run: fastlane match development && fastlane match appstore"
    puts "\n📖 For more help, see the README.md file and Match documentation."
    exit(1)
  end

  # Validate Git authorization for private repositories
  if ENV["MATCH_GIT_URL"].to_s.include?("github.com") && ENV["MATCH_GIT_BASIC_AUTHORIZATION"].nil?
    puts "\n⚠️  WARNING: MATCH_GIT_BASIC_AUTHORIZATION not set"
    puts "If your certificates repository is private, you may need to set:"
    puts "MATCH_GIT_BASIC_AUTHORIZATION for accessing the repository"
  end
end

# Validate environment variables before configuration
validate_match_env_vars

# =============================================================================
# GIT REPOSITORY CONFIGURATION
# =============================================================================

# Git URL for storing certificates and provisioning profiles
# REQUIRED: Set MATCH_GIT_URL in your .env file
git_url(ENV["MATCH_GIT_URL"])

# Git branch to use (default is "master")
git_branch("main")

# =============================================================================
# STORAGE CONFIGURATION
# =============================================================================

# Storage mode - can be "git", "google_cloud", "s3"
storage_mode("git")

# Type of code signing identity to create/manage
# Options: "appstore", "adhoc", "development", "enterprise"
type("development") # This can be overridden in Fastfile

# =============================================================================
# APP CONFIGURATION
# =============================================================================

# App bundle identifiers to manage certificates for
# REQUIRED: Set IOS_BUNDLE_ID and MACOS_BUNDLE_ID in your .env file
bundle_ids = []
if ENV["IOS_BUNDLE_ID"] && !ENV["IOS_BUNDLE_ID"].strip.empty?
  bundle_ids << ENV["IOS_BUNDLE_ID"]
end
if ENV["MACOS_BUNDLE_ID"] && !ENV["MACOS_BUNDLE_ID"].strip.empty?
  bundle_ids << ENV["MACOS_BUNDLE_ID"]
end

if bundle_ids.empty?
  puts "❌ Error: At least one bundle identifier must be set (IOS_BUNDLE_ID or MACOS_BUNDLE_ID)"
  exit(1)
end

app_identifier(bundle_ids)

# Team ID for code signing
# REQUIRED: Set DEVELOPMENT_TEAM in your .env file (validated above)
team_id(ENV["DEVELOPMENT_TEAM"])

# =============================================================================
# KEYCHAIN CONFIGURATION
# =============================================================================

# Keychain name to store certificates and keys
keychain_name(ENV["MATCH_KEYCHAIN_NAME"] || "fastlane_tmp_keychain")

# Keychain password
# Uses environment variable if set, otherwise generates a temporary password
keychain_password(ENV["MATCH_KEYCHAIN_PASSWORD"] || ENV["KEYCHAIN_PASSWORD"] || "")

# =============================================================================
# AUTHENTICATION
# =============================================================================

# Git basic authorization token (for private repositories)
# Set this if your certificates repository is private
if ENV["MATCH_GIT_BASIC_AUTHORIZATION"] && !ENV["MATCH_GIT_BASIC_AUTHORIZATION"].strip.empty?
  git_basic_authorization(ENV["MATCH_GIT_BASIC_AUTHORIZATION"])
end

# Username for git (if using HTTPS with username/password)
if ENV["GIT_USER_EMAIL"] && !ENV["GIT_USER_EMAIL"].strip.empty?
  git_user_email(ENV["GIT_USER_EMAIL"])
end

# =============================================================================
# CERTIFICATE SETTINGS
# =============================================================================

# Username (Apple ID) for generating certificates
# REQUIRED: Set APPLE_ID in your .env file (validated above)
username(ENV["APPLE_ID"])

# Platform to manage certificates for
# Options: "ios", "macos", "tvos"
platform("ios") # This can be overridden in Fastfile

# =============================================================================
# ADVANCED CONFIGURATION
# =============================================================================

# Skip confirmation prompts
skip_confirmation(true)

# Skip certificate verification
skip_certificate_verification(false)

# Shallow clone the git repository (faster, but less history)
shallow_clone(true)

# Clone the full git repository branch only
clone_branch_directly(true)

# Generate readonly certificates (for CI environments)
readonly(false) # This can be overridden in Fastfile

# Force certificate renewal even if not expired
force(false)

# Force for new devices (renew provisioning profiles)
force_for_new_devices(true)

# =============================================================================
# TEMPLATE VARIABLES
# =============================================================================

# Template specific variables that need to be replaced:
#
# Environment Variables to set in .env:
# MATCH_GIT_URL=https://github.com/your-org/certificates-repo.git
# MATCH_GIT_BASIC_AUTHORIZATION=base64_encoded_username_password
# MATCH_PASSWORD=your_certificates_repository_encryption_password
# MATCH_KEYCHAIN_NAME=fastlane_tmp_keychain
# MATCH_KEYCHAIN_PASSWORD=your_keychain_password
# APPLE_ID=your-apple-id@example.com
# DEVELOPMENT_TEAM=YOUR_DEVELOPMENT_TEAM_ID
# IOS_BUNDLE_ID=com.yourcompany.yourapp
# MACOS_BUNDLE_ID=com.yourcompany.yourapp.macos

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================

# To set up Fastlane Match:
#
# 1. Create a new private Git repository for storing certificates
# 2. Set the MATCH_GIT_URL environment variable
# 3. Set a strong password for MATCH_PASSWORD environment variable
# 4. Run: fastlane match init
# 5. Run: fastlane match development
# 6. Run: fastlane match appstore
#
# For team sharing:
# 1. Share the MATCH_PASSWORD with your team members securely
# 2. Grant team members access to the certificates repository
# 3. Team members can run: fastlane match development --readonly
#
# For CI/CD:
# 1. Set all required environment variables as secrets
# 2. Use readonly mode: fastlane match development --readonly
# 3. Set up keychain in CI with MATCH_KEYCHAIN_PASSWORD

# =============================================================================
# CERTIFICATE TYPES
# =============================================================================

# Development certificates:
# - Used for development and debugging
# - Can install on registered devices
# - Created with: fastlane match development
#
# App Store certificates:
# - Used for App Store distribution
# - Created with: fastlane match appstore
#
# Ad Hoc certificates:
# - Used for distributing to specific devices outside App Store
# - Created with: fastlane match adhoc
#
# Enterprise certificates:
# - Used for enterprise distribution
# - Created with: fastlane match enterprise