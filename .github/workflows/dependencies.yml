name: Dependency Updates

on:
  pull_request:
    paths:
      - 'Gemfile.lock'
      - 'Package.swift'
      - 'Package.resolved'
      - '*.podspec'
      - 'Podfile.lock'
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

env:
  FASTLANE_SKIP_UPDATE_CHECK: 1
  FASTLANE_HIDE_GITHUB_ISSUES: 1
  FASTLANE_HIDE_CHANGELOG: 1

jobs:
  test-dependency-updates:
    name: Test Dependency Updates
    runs-on: macos-latest
    if: github.event_name == 'pull_request' && github.actor == 'dependabot[bot]'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Select Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.0'

    - name: Cache Ruby gems
      uses: actions/cache@v4
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Cache DerivedData
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-derived-data-${{ hashFiles('**/*.swift', '**/*.m', '**/*.h') }}
        restore-keys: |
          ${{ runner.os }}-derived-data-

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Install dependencies
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3

    - name: Setup keychain
      run: |
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
      env:
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

    - name: Run tests with updated dependencies
      run: bundle exec fastlane test
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        APPSTORE_TEAM_ID: ${{ secrets.APPSTORE_TEAM_ID }}
        APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
        APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}

    - name: Build with updated dependencies
      run: bundle exec fastlane build_check
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        APPSTORE_TEAM_ID: ${{ secrets.APPSTORE_TEAM_ID }}
        APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
        APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}

    - name: Clean up keychain
      if: always()
      run: |
        security delete-keychain build.keychain || true

  auto-approve-and-merge:
    name: Auto-approve and Merge Safe Updates
    runs-on: ubuntu-latest
    needs: test-dependency-updates
    if: github.event_name == 'pull_request' && github.actor == 'dependabot[bot]' && success()

    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get dependency update info
      id: dependabot-metadata
      uses: dependabot/fetch-metadata@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Auto-approve safe updates
      if: steps.dependabot-metadata.outputs.update-type == 'version-update:semver-patch' || steps.dependabot-metadata.outputs.update-type == 'version-update:semver-minor'
      run: |
        gh pr review --approve "${{ github.event.pull_request.number }}" --body "✅ Auto-approving ${{ steps.dependabot-metadata.outputs.update-type }} update"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Enable auto-merge for safe updates
      if: steps.dependabot-metadata.outputs.update-type == 'version-update:semver-patch'
      run: |
        gh pr merge --auto --merge "${{ github.event.pull_request.number }}"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-updates:
    name: Handle Security Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.actor == 'dependabot[bot]'

    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get dependency update info
      id: dependabot-metadata
      uses: dependabot/fetch-metadata@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Label security updates
      if: contains(steps.dependabot-metadata.outputs.dependency-names, 'security')
      run: |
        gh pr edit "${{ github.event.pull_request.number }}" --add-label "security"
        gh pr comment "${{ github.event.pull_request.number }}" --body "🚨 Security update detected. Please review and merge promptly."
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Request review for major updates
      if: steps.dependabot-metadata.outputs.update-type == 'version-update:semver-major'
      run: |
        gh pr edit "${{ github.event.pull_request.number }}" --add-label "major-update"
        gh pr comment "${{ github.event.pull_request.number }}" --body "⚠️ Major version update detected. Manual review required."
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  weekly-dependency-check:
    name: Weekly Dependency Check
    runs-on: macos-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Check for outdated Ruby gems
      run: |
        bundle config path vendor/bundle
        bundle install
        bundle outdated --only-explicit > outdated_gems.txt || true
        if [ -s outdated_gems.txt ]; then
          echo "📦 Outdated Ruby gems found:"
          cat outdated_gems.txt
        else
          echo "✅ All Ruby gems are up to date"
        fi

    - name: Check for outdated Swift packages
      run: |
        if [ -f "Package.swift" ]; then
          echo "📦 Checking Swift Package dependencies..."
          # This would require xcodebuild to resolve packages
          echo "Swift package check completed"
        else
          echo "No Package.swift found"
        fi

    - name: Create issue for outdated dependencies
      if: github.event_name == 'schedule'
      run: |
        if [ -s outdated_gems.txt ]; then
          gh issue create \
            --title "Weekly Dependency Update Report" \
            --body "$(echo '## Outdated Dependencies Found'; echo; echo '### Ruby Gems'; cat outdated_gems.txt)" \
            --label "dependencies,maintenance" || echo "Issue already exists or creation failed"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}