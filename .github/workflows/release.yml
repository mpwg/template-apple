name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Deployment target'
        required: true
        default: 'testflight'
        type: choice
        options:
        - testflight
        - appstore
      version_bump:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  FASTLANE_SKIP_UPDATE_CHECK: 1
  FASTLANE_HIDE_GITHUB_ISSUES: 1
  FASTLANE_HIDE_CHANGELOG: 1

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.deployment_target || 'TestFlight' }}
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Select Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.0'

    - name: Cache Ruby gems
      uses: actions/cache@v4
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Cache DerivedData
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-derived-data-${{ hashFiles('**/*.swift', '**/*.m', '**/*.h') }}
        restore-keys: |
          ${{ runner.os }}-derived-data-

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Install dependencies
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3

    - name: Setup keychain
      run: |
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
      env:
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

    - name: Deploy to TestFlight
      if: github.event.inputs.deployment_target == 'testflight' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
      run: bundle exec fastlane beta
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        APPSTORE_TEAM_ID: ${{ secrets.APPSTORE_TEAM_ID }}
        APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
        APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}

    - name: Deploy to App Store
      if: github.event.inputs.deployment_target == 'appstore'
      run: bundle exec fastlane release
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        APPSTORE_TEAM_ID: ${{ secrets.APPSTORE_TEAM_ID }}
        APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
        APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: release-artifacts
        path: |
          *.ipa
          *.app
          *.dSYM.zip
        retention-days: 90

    - name: Clean up keychain
      if: always()
      run: |
        security delete-keychain build.keychain || true

    - name: Notify on success
      if: success()
      run: |
        echo "🎉 Successfully deployed to ${{ github.event.inputs.deployment_target || 'TestFlight' }}"

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Deployment to ${{ github.event.inputs.deployment_target || 'TestFlight' }} failed"
        exit 1

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract release notes
      run: |
        if [ -f "CHANGELOG.md" ]; then
          # Extract release notes from CHANGELOG.md
          sed -n '/^## \[.*\]/,/^## \[.*\]/p' CHANGELOG.md | head -n -1 | tail -n +2 > RELEASE_NOTES.md
        else
          echo "Release notes not available" > RELEASE_NOTES.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}