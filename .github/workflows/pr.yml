name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

env:
  FASTLANE_SKIP_UPDATE_CHECK: 1
  FASTLANE_HIDE_GITHUB_ISSUES: 1
  FASTLANE_HIDE_CHANGELOG: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  validation:
    name: Quick Validation
    runs-on: macos-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Select Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.0'

    - name: Cache Ruby gems
      uses: actions/cache@v4
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Cache DerivedData
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-derived-data-${{ hashFiles('**/*.swift', '**/*.m', '**/*.h') }}
        restore-keys: |
          ${{ runner.os }}-derived-data-

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Install dependencies
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3

    - name: Validate Fastlane configuration
      run: |
        if [ ! -f "fastlane/Fastfile" ]; then
          echo "‚ùå Fastfile not found"
          exit 1
        fi
        bundle exec fastlane list

    - name: Check for merge conflicts
      run: |
        if grep -r "<<<<<<< HEAD" . --exclude-dir=.git; then
          echo "‚ùå Merge conflicts detected"
          exit 1
        fi

    - name: Swift Lint (if available)
      run: |
        if which swiftlint > /dev/null; then
          swiftlint --strict
        else
          echo "‚ö†Ô∏è  SwiftLint not found, skipping"
        fi

    - name: Swift Format Check (if available)
      run: |
        if which swift-format > /dev/null; then
          swift-format --mode diff --recursive .
        else
          echo "‚ö†Ô∏è  swift-format not found, skipping"
        fi

    - name: Setup keychain
      run: |
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
      env:
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

    - name: Run unit tests only
      run: bundle exec fastlane test_unit
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        APPSTORE_TEAM_ID: ${{ secrets.APPSTORE_TEAM_ID }}
        APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
        APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}

    - name: Build check
      run: bundle exec fastlane build_check
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        APPSTORE_TEAM_ID: ${{ secrets.APPSTORE_TEAM_ID }}
        APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
        APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pr-test-results
        path: |
          fastlane/test_output/
          *.xcresult
        retention-days: 7

    - name: Clean up keychain
      if: always()
      run: |
        security delete-keychain build.keychain || true

  size-check:
    name: Binary Size Check
    runs-on: macos-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Select Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.0'

    - name: Cache Ruby gems
      uses: actions/cache@v4
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Install dependencies
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3

    - name: Setup keychain
      run: |
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain
      env:
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

    - name: Build current branch
      run: bundle exec fastlane build_for_size_check
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        APPSTORE_TEAM_ID: ${{ secrets.APPSTORE_TEAM_ID }}
        APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
        APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}

    - name: Check binary size changes
      run: |
        # This is a placeholder for binary size comparison logic
        echo "üìä Binary size check completed"
        echo "Current build size: $(du -h *.ipa 2>/dev/null || echo 'N/A')"

    - name: Clean up keychain
      if: always()
      run: |
        security delete-keychain build.keychain || true