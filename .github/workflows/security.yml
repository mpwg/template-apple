# Security Scanning and Vulnerability Management Workflow

name: Security Scans

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - codeql
        - dependency
        - secrets
        - static

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # CodeQL Analysis for Swift and Objective-C
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: macos-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'codeql' || github.event.inputs.scan_type == null

    strategy:
      fail-fast: false
      matrix:
        language: [ 'swift' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'

    - name: Build project for CodeQL
      run: |
        # Build iOS project if exists
        if [ -f "*.xcodeproj" ]; then
          xcodebuild build \
            -project "$(find . -name "*.xcodeproj" | head -1)" \
            -scheme "$(xcodebuild -list -project "$(find . -name "*.xcodeproj" | head -1)" | grep -A 1 "Schemes:" | tail -1 | xargs)" \
            -destination 'platform=iOS Simulator,name=iPhone 15' \
            -configuration Debug
        fi

        # Build Swift Package if exists
        if [ -f "Package.swift" ]; then
          swift build
        fi

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{ matrix.language }}"

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: macos-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependency' || github.event.inputs.scan_type == null

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Install security scanning tools
      run: |
        # Install bundle-audit for Ruby gems
        gem install bundle-audit

        # Update vulnerability database
        bundle audit --update

    - name: Audit Ruby Dependencies
      run: |
        if [ -f "Gemfile" ]; then
          echo "🔍 Auditing Ruby dependencies..."
          bundle audit --check --format json --output dependency-audit.json
        else
          echo "No Gemfile found, skipping Ruby dependency audit"
        fi

    - name: Swift Package Security Scan
      run: |
        if [ -f "Package.swift" ]; then
          echo "🔍 Scanning Swift Package dependencies..."
          # Use swift package show-dependencies to list all dependencies
          swift package show-dependencies --format json > swift-deps.json

          # TODO: Add Swift-specific vulnerability scanner when available
          echo "Swift package dependencies scanned"
        else
          echo "No Package.swift found, skipping Swift dependency scan"
        fi

    - name: Upload Security Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-security-results
        path: |
          dependency-audit.json
          swift-deps.json
        retention-days: 30

  # Secret Scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == null

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning

    - name: Install TruffleHog
      run: |
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

    - name: Run TruffleHog Secret Scan
      run: |
        echo "🔍 Scanning for secrets in repository..."
        trufflehog git file://. \
          --format json \
          --output trufflehog-results.json \
          --no-update \
          --fail || echo "Secrets detected - review required"

    - name: Install GitLeaks
      run: |
        wget https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_linux_x64.tar.gz
        tar -xzf gitleaks_linux_x64.tar.gz
        sudo mv gitleaks /usr/local/bin/

    - name: Run GitLeaks Secret Scan
      run: |
        echo "🔍 Running GitLeaks secret detection..."
        gitleaks detect \
          --source . \
          --report-path gitleaks-report.json \
          --report-format json \
          --verbose || echo "Potential secrets found - review required"

    - name: Upload Secret Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secret-scan-results
        path: |
          trufflehog-results.json
          gitleaks-report.json
        retention-days: 30

  # Static Security Analysis
  static-security-analysis:
    name: Static Security Analysis
    runs-on: macos-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'static' || github.event.inputs.scan_type == null

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up SwiftLint
      run: |
        if [[ "$(uname -m)" == arm64 ]]; then
          export PATH="/opt/homebrew/bin:$PATH"
        fi

        if ! command -v swiftlint &> /dev/null; then
          brew install swiftlint
        fi

    - name: Run Security-Focused SwiftLint
      run: |
        echo "🔍 Running security-focused SwiftLint analysis..."
        swiftlint lint \
          --config .swiftlint.yml \
          --reporter json \
          --output swiftlint-security.json \
          --strict || echo "SwiftLint security issues found"

    - name: Run Xcode Static Analyzer
      run: |
        # Run static analysis if Xcode project exists
        if [ -f "*.xcodeproj" ]; then
          echo "🔍 Running Xcode Static Analyzer..."
          xcodebuild analyze \
            -project "$(find . -name "*.xcodeproj" | head -1)" \
            -scheme "$(xcodebuild -list -project "$(find . -name "*.xcodeproj" | head -1)" | grep -A 1 "Schemes:" | tail -1 | xargs)" \
            -destination 'platform=iOS Simulator,name=iPhone 15' \
            -configuration Debug
        fi

    - name: Custom Security Checks
      run: |
        echo "🔍 Running custom security checks..."

        # Check for hardcoded URLs and sensitive patterns
        echo "Checking for potential security issues..."

        # Look for hardcoded URLs
        find . -name "*.swift" -exec grep -l "http://" {} \; || true

        # Look for potential API keys or secrets in code
        find . -name "*.swift" -exec grep -l "api.*key\|secret\|password" {} \; || true

        # Check for debug configurations in release builds
        grep -r "DEBUG" --include="*.swift" . || true

    - name: Upload Static Analysis Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: static-security-results
        path: |
          swiftlint-security.json
        retention-days: 30

  # iOS/macOS Specific Security Checks
  ios-security-checks:
    name: iOS/macOS Security Validation
    runs-on: macos-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == null

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate App Transport Security
      run: |
        echo "🔍 Checking App Transport Security (ATS) configuration..."

        # Check Info.plist files for ATS settings
        find . -name "Info.plist" -exec plutil -p {} \; | grep -i transport || echo "No ATS exceptions found"

    - name: Check Entitlements Security
      run: |
        echo "🔍 Validating entitlements security..."

        # Find and validate entitlements files
        find . -name "*.entitlements" -exec echo "Checking {}" \; -exec plutil -p {} \; || echo "No entitlements files found"

    - name: Validate Keychain Usage
      run: |
        echo "🔍 Checking keychain usage patterns..."

        # Look for keychain API usage
        grep -r "SecItemAdd\|SecItemUpdate\|SecItemCopyMatching" --include="*.swift" --include="*.m" . || echo "No keychain usage found"

    - name: Check Privacy Permissions
      run: |
        echo "🔍 Validating privacy permission usage..."

        # Check for privacy-related Info.plist keys
        find . -name "Info.plist" -exec plutil -p {} \; | grep -i "NSCameraUsageDescription\|NSLocationUsageDescription\|NSContactsUsageDescription" || echo "No privacy permissions found"

  # Generate Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, secret-scan, static-security-analysis, ios-security-checks]
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download All Artifacts
      uses: actions/download-artifact@v4

    - name: Generate Security Summary Report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "" >> security-report.md
        echo "**Generated:** $(date)" >> security-report.md
        echo "**Repository:** ${{ github.repository }}" >> security-report.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-report.md
        echo "" >> security-report.md

        echo "## Summary" >> security-report.md
        echo "This report contains results from automated security scans including:" >> security-report.md
        echo "- CodeQL static analysis" >> security-report.md
        echo "- Dependency vulnerability scanning" >> security-report.md
        echo "- Secret detection" >> security-report.md
        echo "- iOS/macOS specific security checks" >> security-report.md
        echo "" >> security-report.md

        echo "## Scan Results" >> security-report.md

        # Process each artifact if it exists
        if [ -d "dependency-security-results" ]; then
          echo "### Dependency Security" >> security-report.md
          echo "- Ruby gem audit completed" >> security-report.md
          echo "- Swift package dependencies scanned" >> security-report.md
          echo "" >> security-report.md
        fi

        if [ -d "secret-scan-results" ]; then
          echo "### Secret Detection" >> security-report.md
          echo "- TruffleHog scan completed" >> security-report.md
          echo "- GitLeaks scan completed" >> security-report.md
          echo "" >> security-report.md
        fi

        echo "## Recommendations" >> security-report.md
        echo "1. Review all scan results in the workflow artifacts" >> security-report.md
        echo "2. Address any high-priority vulnerabilities immediately" >> security-report.md
        echo "3. Update dependencies with known vulnerabilities" >> security-report.md
        echo "4. Remove any detected secrets and rotate credentials" >> security-report.md
        echo "" >> security-report.md
        echo "For detailed results, check the individual artifact files." >> security-report.md

    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 90

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔒 Security Scan Results\n\n${report}\n\n*This comment was automatically generated by the security scanning workflow.*`
          });

  # Security Policy Compliance Check
  compliance-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == null

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check Security Policy Exists
      run: |
        if [ -f "SECURITY.md" ]; then
          echo "✅ Security policy exists"
        else
          echo "❌ Security policy missing - creating reminder"
          echo "::warning::Security policy (SECURITY.md) not found"
        fi

    - name: Validate Branch Protection
      run: |
        echo "🔍 Checking if branch protection should be enabled..."
        echo "::notice::Ensure branch protection rules are configured for main/develop branches"

    - name: Check for Security Documentation
      run: |
        echo "🔍 Checking for security documentation..."

        if [ -f "docs/security" ] || [ -f "SECURITY.md" ] || ls security/*.md 2>/dev/null; then
          echo "✅ Security documentation found"
        else
          echo "::warning::Consider adding security documentation"
        fi