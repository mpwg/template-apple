# CodeQL Configuration for iOS/macOS Projects

# Disable default queries to use custom security-focused queries
disable-default-queries: false

# Query packs to include
packs:
  - codeql/swift-queries:codeql-suites/swift-security.qls

# Additional query suites
queries:
  - uses: security-and-quality
  - uses: security-experimental

# Paths to ignore during analysis
paths-ignore:
  - "Pods/**"
  - "**/DerivedData/**"
  - "**/.build/**"
  - "**/build/**"
  - "fastlane/**"
  - "scripts/**"
  - "vendor/**"
  - "Carthage/**"
  - "**/*.generated.swift"
  - "**/Generated/**"
  - "**/Mocks/**"
  - "**/*.pb.swift"
  - "**/protobuf/**"

# Paths to specifically include (overrides paths-ignore for these specific paths)
paths:
  - "Sources/**"
  - "Tests/**"
  - "**/*.swift"
  - "**/*.h"
  - "**/*.m"
  - "**/*.mm"

# Swift-specific configuration
swift:
  # Additional Swift flags
  extractor:
    # Include Swift Package Manager dependencies
    include-dependencies: true

    # Swift compiler flags
    compiler-flags:
      - "-sdk"
      - "iphoneos"
      - "-target"
      - "arm64-apple-ios15.0"

# Custom queries for iOS/macOS specific security issues
custom-queries:
  # Hardcoded secrets detection
  - name: "Hardcoded API Keys"
    description: "Detect hardcoded API keys and secrets"
    query: |
      import swift

      from StringLiteral s
      where s.getValue().regexpMatch("(?i)(api[_-]?key|secret|password|token)\\s*[:=]\\s*[\"']\\w+[\"']")
      select s, "Potential hardcoded secret detected"

  # Insecure network communication
  - name: "Insecure HTTP URLs"
    description: "Detect HTTP URLs that should use HTTPS"
    query: |
      import swift

      from StringLiteral s
      where s.getValue().regexpMatch("http://[^\\s\"']+")
      select s, "HTTP URL detected - consider using HTTPS"

  # Unsafe SQL queries
  - name: "SQL Injection Risk"
    description: "Detect potential SQL injection vulnerabilities"
    query: |
      import swift

      from CallExpr call, StringLiteral sql
      where call.getStaticTarget().getName().regexpMatch("(?i)(execute|query|prepare).*sql")
        and call.getAnArgument() = sql
        and sql.getValue().regexpMatch(".*\\+.*|.*\\$\\{.*\\}.*")
      select call, "Potential SQL injection vulnerability"

# Analysis configuration
analysis:
  # Increase timeout for large projects
  timeout: "30m"

  # Memory allocation
  ram: "4096"

  # Number of threads
  threads: "4"

# Additional security-focused configurations
security:
  # Enable all security-related queries
  enable-experimental-queries: true

  # Severity thresholds
  error-severity: "high"
  warning-severity: "medium"
  note-severity: "low"

# Platform-specific configurations
platforms:
  ios:
    # iOS-specific security checks
    checks:
      - "app-transport-security"
      - "keychain-access"
      - "biometric-authentication"
      - "privacy-permissions"

  macos:
    # macOS-specific security checks
    checks:
      - "sandbox-violations"
      - "privilege-escalation"
      - "system-api-misuse"

# Integration with GitHub Security features
github:
  # Upload results to Security tab
  upload-sarif: true

  # Create issues for high-severity findings
  create-issues: true

  # Security advisory integration
  security-advisories: true